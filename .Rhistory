phi=GetPhi(vec=c(v,1),nclustmax=nclustmax)
theta=sample.theta(dat=dat,nclustmax=nclustmax,nloc=nloc,z=z,psi=psi)
#to avoid numerical issues
theta[theta<lo]=lo
# theta=theta.true
#get logl
tmp=sum(dat*log(theta)[z,])+sum(dbeta(v,1,gamma1,log=T))+sum((psi-1)*log(theta))
#store results
store.loglikel[i]=tmp
store.theta[i,]=theta
store.phi[i,]=phi
store.z[i,]=z
}
plot(store.loglikel,type='l')
which(store.loglikel == max(store.loglikel))
store.loglikel[768]
setwd("~/Documents/Snail Kite Project/Data")
obs<- read.csv("Occupancy Matrix for all Obs and Locs.csv", header = T, sep = ",")
obs1.breakpts<- read.csv("ID1 Breakpoints (5 km).csv", header = T, sep = ",")
obs1.breakpts=obs1.breakpts[,1]
obs12.breakpts<- read.csv("ID12 Breakpoints (5 km).csv", header = T, sep = ",")
obs12.breakpts=obs12.breakpts[,1]
obs19.breakpts<- read.csv("ID19 Breakpoints (5 km).csv", header = T, sep = ",")
obs19.breakpts=obs19.breakpts[,1]
obs27.breakpts<- read.csv("ID27 Breakpoints (5 km).csv", header = T, sep = ",")
obs27.breakpts=obs27.breakpts[,1]
obs1=data.frame(obs) %>% filter(id == 1) %>% dplyr::select(-id)
obs12=data.frame(obs) %>% filter(id == 12) %>% dplyr::select(-id)
obs19=data.frame(obs) %>% filter(id == 19) %>% dplyr::select(-id)
obs27=data.frame(obs) %>% filter(id == 27) %>% dplyr::select(-id)
obs1$time1=1:nrow(obs1)
obs12$time1=1:nrow(obs12)
obs19$time1=1:nrow(obs19)
obs27$time1=1:nrow(obs27)
############################################
#### Summarize Results From First Model ####
############################################
nloc=ncol(obs)-1 #remove time1
set.seed(1)
library(dplyr)
setwd("~/Documents/Snail Kite Project/Data")
obs<- read.csv("Occupancy Matrix for all Obs and Locs.csv", header = T, sep = ",")
obs1.breakpts<- read.csv("ID1 Breakpoints (5 km).csv", header = T, sep = ",")
obs1.breakpts=obs1.breakpts[,1]
obs12.breakpts<- read.csv("ID12 Breakpoints (5 km).csv", header = T, sep = ",")
obs12.breakpts=obs12.breakpts[,1]
obs19.breakpts<- read.csv("ID19 Breakpoints (5 km).csv", header = T, sep = ",")
obs19.breakpts=obs19.breakpts[,1]
obs27.breakpts<- read.csv("ID27 Breakpoints (5 km).csv", header = T, sep = ",")
obs27.breakpts=obs27.breakpts[,1]
obs1=data.frame(obs) %>% filter(id == 1) %>% dplyr::select(-id)
obs12=data.frame(obs) %>% filter(id == 12) %>% dplyr::select(-id)
obs19=data.frame(obs) %>% filter(id == 19) %>% dplyr::select(-id)
obs27=data.frame(obs) %>% filter(id == 27) %>% dplyr::select(-id)
obs1$time1=1:nrow(obs1)
obs12$time1=1:nrow(obs12)
obs19$time1=1:nrow(obs19)
obs27$time1=1:nrow(obs27)
############################################
#### Summarize Results From First Model ####
############################################
nloc=ncol(obs)-1 #remove time1
obs1.seg=get.summary.stats(obs1.breakpts,obs1,nloc)
setwd("~/Documents/Snail Kite Project/Cat-Dirichlet Gibbs Sampler")
source('gibbs functions2.R')
obs1.seg=get.summary.stats(obs1.breakpts,obs1,nloc)
source('~/Documents/Snail Kite Project/git_segmentation_behavior/helper functions.R') #for assign.time.seg() function
setwd("~/Documents/Snail Kite Project/Data/R Scripts/cluster_tsegments_loc")
source('helper functions.R') #for prepping data
grid.summary.table=function(dat,id,grid.cell.locs,crs){  #dat must already have time.seg assigned
#create grid and extract coords per cell
grid_5<- raster(extent(min(dat$utmlong), max(dat$utmlong),
min(dat$utmlat), max(dat$utmlat)) + 10000)
res(grid_5)<- 5000
proj4string(grid_5)<- crs
grid_5[]<- 0
grid.cell.locs<- coordinates(grid_5) %>% data.frame()
names(grid.cell.locs)<- c("grid.x", "grid.y")
grid.cell.locs$grid.cell<- 1:length(grid_5)
#filter by only cells visited by ID
dat=dat %>% filter(id==id)
dat<- left_join(dat,grid.cell.locs, by="grid.cell")
grid.cell.id<- unique(dat$grid.cell)
dat.cells=matrix(NA, length(grid.cell.id), 3)
for (i in 1:length(grid.cell.id)) {
tmp<- dat %>% filter(grid.cell == grid.cell.id[i]) %>% dplyr::select(grid.cell,grid.x,grid.y) %>%
slice(n=1) %>% as.numeric()
dat.cells[i,]<- tmp
}
colnames(dat.cells)<- c("grid.cell","grid.x","grid.y")
dat.cells
}
setwd("~/Documents/Snail Kite Project/Data")
dat<- read.csv("Snail Kite Gridded Data.csv", header = T, sep = ",")
dat1=dat %>% filter(id==1)
dat1<- assign.time.seg(obs1.seg, obs1.breakpts, dat1)
View(dat1)
grid.summary.table=function(dat,crs){  #dat must already have time.seg assigned
#create grid and extract coords per cell
grid_5<- raster(extent(min(dat$utmlong), max(dat$utmlong),
min(dat$utmlat), max(dat$utmlat)) + 10000)
res(grid_5)<- 5000
proj4string(grid_5)<- crs
grid_5[]<- 0
grid.cell.locs<- coordinates(grid_5) %>% data.frame()
names(grid.cell.locs)<- c("grid.x", "grid.y")
grid.cell.locs$grid.cell<- 1:length(grid_5)
#filter by only cells visited by ID
dat<- left_join(dat,grid.cell.locs, by="grid.cell")
grid.cell.id<- unique(dat$grid.cell)
dat.cells=matrix(NA, length(grid.cell.id), 3)
for (i in 1:length(grid.cell.id)) {
tmp<- dat %>% filter(grid.cell == grid.cell.id[i]) %>% dplyr::select(grid.cell,grid.x,grid.y) %>%
slice(n=1) %>% as.numeric()
dat.cells[i,]<- tmp
}
colnames(dat.cells)<- c("grid.cell","grid.x","grid.y")
dat.cells
}
grid.summary.table(dat1,CRS("+init=epsg:32617"))
library(raster)
library(sp)
grid.summary.table(dat1,CRS("+init=epsg:32617"))
library(purrr)
library(cluster)
grid_5<- raster(extent(min(dat$utmlong), max(dat$utmlong),
min(dat$utmlat), max(dat$utmlat)) + 10000)
res(grid_5)<- 5000
proj4string(grid_5)<- crs
grid_5[]<- 0
grid.cell.locs<- coordinates(grid_5) %>% data.frame()
names(grid.cell.locs)<- c("grid.x", "grid.y")
grid.cell.locs$grid.cell<- 1:length(grid_5)
grid_5<- raster(extent(min(dat$utmlong), max(dat$utmlong),
min(dat$utmlat), max(dat$utmlat)) + 10000)
res(grid_5)<- 5000
proj4string(grid_5)<- CRS("+init = epsg:32617")
grid_5[]<- 0
grid.cell.locs<- coordinates(grid_5) %>% data.frame()
names(grid.cell.locs)<- c("grid.x", "grid.y")
grid.cell.locs$grid.cell<- 1:length(grid_5)
grid_5<- raster(extent(min(dat$utmlong), max(dat$utmlong),
min(dat$utmlat), max(dat$utmlat)) + 10000)
res(grid_5)<- 5000
proj4string(grid_5)<- CRS("+init=epsg:32617")
grid_5[]<- 0
grid.cell.locs<- coordinates(grid_5) %>% data.frame()
names(grid.cell.locs)<- c("grid.x", "grid.y")
grid.cell.locs$grid.cell<- 1:length(grid_5)
dat.cells<- grid.summary.table(dat1, CRS("+init=epsg:32617"))
gap.stat<- clusGap(dat.cells[,-1], FUN = kmeans, K.max = 20, B = 50)
gap.stat$Tab
print(gap.stat, method = 'firstmax')
library(factoextra)
fviz_gap_stat(gap.stat)
fviz_nbclust(dat.cells[,-1], kmeans, method = "silhouette")
fviz_nbclust(dat.cells[,-1], kmeans, method = "wss")
store.val=matrix(NA,20,1)
for (i in 1:20) {  #test from 1 to 20 clusters
tmp=kmeans(dat1.cells[,-1], i)
store.val[i,]=tmp$betweenss / tmp$totss
}
store.val=matrix(NA,20,1)
for (i in 1:20) {  #test from 1 to 20 clusters
tmp=kmeans(dat.cells[,-1], i)
store.val[i,]=tmp$betweenss / tmp$totss
}
plot(store.val); abline(v=6, col="red")
fun <- function(){
k <- readline("What is the value of k?")
k <- as.numeric(unlist(strsplit(k, ",")))
set.seed(1)
dat.kmeans<- kmeans(dat.cells[,-1], k)
dat.cells<- dat.cells %>% data.frame()
dat.cells$k.clust<- dat.kmeans$cluster
return(dat.cells)
}
if(interactive()) fun()
fun <- function(){
k <- readline("What is the value of k?  ")
k <- as.numeric(unlist(strsplit(k, ",")))
set.seed(1)
dat.kmeans<- kmeans(dat.cells[,-1], k)
dat.cells<- dat.cells %>% data.frame()
dat.cells$k.clust<- dat.kmeans$cluster
return(dat.cells)
}
if(interactive()) fun()
kmeans.cluster=function(dat.cells) {
store.val=matrix(NA,20,1)
for (i in 1:20) {  #test from 1 to 20 clusters
tmp=kmeans(dat1.cells[,-1], i)
store.val[i,]=tmp$betweenss / tmp$totss
}
plot(store.val); abline(v=6, col="red")
# 6 is best value for smallest number of clusters and best variance explained
if(interactive()) k.select()
}
kmeans.cluster=function(dat.cells) {
store.val=matrix(NA,20,1)
for (i in 1:20) {  #test from 1 to 20 clusters
tmp=kmeans(dat.cells[,-1], i)
store.val[i,]=tmp$betweenss / tmp$totss
}
plot(store.val)
if(interactive()) k.select()
}
kmeans.cluster(dat.cells)
k.select <- function(){
k <- readline("What is the value of k?  ")
k <- as.numeric(unlist(strsplit(k, ",")))
set.seed(1)
dat.kmeans<- kmeans(dat.cells[,-1], k)
dat.cells<- dat.cells %>% data.frame()
dat.cells$k.clust<- dat.kmeans$cluster
return(dat.cells)
}
kmeans.cluster(dat.cells)
foo<- kmeans.cluster(dat.cells)
View(foo)
obs1.seg=get.summary.stats(obs1.breakpts,obs1,nloc)
View(obs1.seg)
View(foo)
View(dat1)
dat1<- left_join(dat1, dat.cells[,-c(2:3)], by = "grid.cell")
dat1<- left_join(dat1, foo[,-c(2:3)], by = "grid.cell")
View(dat1)
View(dat1)
length(unique(dat$time.seg))
length(unique(dat1$time.seg))
max(dat1$k.clust)
foo<- dat1 %>% filter(time.seg==1) %>% group_by(k.clust) %>% count()
foo
dat1 %>% filter(time.seg==2) %>% group_by(k.clust) %>% count()
dat1 %>% filter(time.seg==3) %>% group_by(k.clust) %>% count()
foo<- dat1 %>% filter(time.seg==3) %>% group_by(k.clust) %>% count()
foo
foo$k.clust
foo<- dat1 %>% filter(time.seg==3) %>% group_by(k.clust) %>% summarise(n=n())
foo
dat1 %>% filter(time.seg==3) %>% group_by(k.clust) %>% table()
dat1 %>% filter(time.seg==3) %>% group_by(k.clust) %>% tab()
dat1 %>% filter(time.seg==3) %>% group_by(k.clust) %>% table(k.clust)
foo<- dat1 %>% filter(time.seg==3) %>% group_by(k.clust)
foo
View(foo)
foo<- dat1 %>% filter(time.seg==3) %>% group_by(k.clust) %>% count()
foo$k.clust
foo$n
kclust=6
n=49
res=matrix(0,n,6)
ind=foo
ind
res[3,ind$k.clust]=ind$n
View(res)
ind<- dat1 %>% filter(time.seg==1) %>% group_by(k.clust) %>% count()
res[1,ind$k.clust]=ind$n
View(dat1)
ind<- dat1 %>% filter(time.seg==2) %>% group_by(k.clust) %>% count()
res[2,ind$k.clust]=ind$n
get.summary.stats_kmeans=function(breakpt,dat,nloc){  #dat must have kclust assigned by obs
kclust=dat$k.clust
n=length(unique(dat$time.seg))
res=matrix(0,n,max(dat$k.clust))
for (i in 1:n){
ind=dat %>% filter(time.seg==i) %>% group_by(k.clust) %>% count()
res[i,ind$k.clust]=ind$n #takes count of each cluster within given time segment
}
res
}
get.summary.stats_kmeans=function(dat){  #dat must have kclust assigned by obs
kclust=dat$k.clust
n=length(unique(dat$time.seg))
res=matrix(0,n,max(dat$k.clust))
for (i in 1:n){
ind=dat %>% filter(time.seg==i) %>% group_by(k.clust) %>% count()
res[i,ind$k.clust]=ind$n #takes count of each cluster within given time segment
}
res
}
foo<- get.summary.stats_kmeans(dat1)
View(foo)
image(foo)
dat1.cells<- grid.summary.table(dat = dat1, crs = CRS('+init=epsg:32617'))
View(dat1.cells)
k.select <- function(dat.cells){
k <- readline("What is the value of k?  ")
k <- as.numeric(unlist(strsplit(k, ",")))
set.seed(1)
dat.kmeans<- kmeans(dat.cells[,-1], k)
dat.cells<- dat.cells %>% data.frame()
dat.cells$k.clust<- dat.kmeans$cluster
return(dat.cells)
}
k.select(dat.cells)
dat1.cells<- grid.summary.table(dat = dat1, crs = CRS('+init=epsg:32617'))
kmeans.cluster(dat1.cells)
k <- readline("What is the value of k?  ")
k <- as.numeric(unlist(strsplit(k, ",")))
set.seed(1)
dat.kmeans<- kmeans(dat.cells[,-1], k)
dat.cells<- dat.cells %>% data.frame()
dat.cells$k.clust<- dat.kmeans$cluster
return(dat.cells)
}
kmeans.cluster=function(dat.cells) {
store.val=matrix(NA,20,1)
set.seed(1)
for (i in 1:20) {  #test from 1 to 20 clusters
tmp=kmeans(dat.cells[,-1], i)
store.val[i,]=tmp$betweenss / tmp$totss
}
plot(store.val)
if(interactive()) k.select()
}
k.select <- function(dat.cells){
k <- readline("What is the value of k?  ")
k <- as.numeric(unlist(strsplit(k, ",")))
set.seed(1)
dat.kmeans<- kmeans(dat.cells[,-1], k)
dat.cells<- dat.cells %>% data.frame()
dat.cells$k.clust<- dat.kmeans$cluster
return(dat.cells)
}
kmeans.cluster(dat1.cells)
k.select <- function(){  #to be used by kmeans.cluster()
k <- readline("What is the value of k?  ")
k <- as.numeric(unlist(strsplit(k, ",")))
set.seed(1)
dat.kmeans<- kmeans(dat.cells[,-1], k)
dat.cells<- dat.cells %>% data.frame()
dat.cells$k.clust<- dat.kmeans$cluster
return(dat.cells)
}
kmeans.cluster(dat1.cells)
View(dat1.cells)
View(dat1)
dat1<- dat1[,-14]
View(dat1)
dat1<- left_join(dat1, dat1.cells[,-c(2:3)], by = "grid.cell")
dat1.cells<- kmeans.cluster(dat1.cells)
dat1<- left_join(dat1, dat1.cells[,-c(2:3)], by = "grid.cell")
obs1.kmeans<- get.summary.stats_kmeans(dat1)
View(obs1.kmeans)
dat.list<- list(1=dat1, 12=dat12, 19=dat19, 27=dat27)
dat.list<- list(`1`=dat1, `12`=dat12, `19`=dat19, `27`=dat27)
dat12=dat %>% filter(id==12)
dat12<- assign.time.seg(obs12.seg, obs12.breakpts, dat12)
dat19=dat %>% filter(id==19)
dat19<- assign.time.seg(obs19.seg, obs19.breakpts, dat19)
dat27=dat %>% filter(id==27)
dat27<- assign.time.seg(obs27.seg, obs27.breakpts, dat27)
obs12.seg=get.summary.stats(obs12.breakpts,obs12,nloc)
obs19.seg=get.summary.stats(obs19.breakpts,obs19,nloc)
obs27.seg=get.summary.stats(obs27.breakpts,obs27,nloc)
dat12=dat %>% filter(id==12)
dat12<- assign.time.seg(obs12.seg, obs12.breakpts, dat12)
dat19=dat %>% filter(id==19)
dat19<- assign.time.seg(obs19.seg, obs19.breakpts, dat19)
dat27=dat %>% filter(id==27)
dat27<- assign.time.seg(obs27.seg, obs27.breakpts, dat27)
dat.list<- list(`1`=dat1, `12`=dat12, `19`=dat19, `27`=dat27)
length(dat.list)
dat.list[[1]]
head(dat.list[[1]])
head(dat.list[[2]])
head(dat.list[[3]])
kmeans.list<- vector("list", length(dat.list))
for (i in 1:length(dat.list)) {
dat.cells<- grid.summary.table(dat = dat.list[[i]], crs = CRS('+init=epsg:32617'))
dat.cells<- kmeans.cluster(dat.cells)
dat<- left_join(dat.list[[i]], dat.cells[,-c(2:3)], by = "grid.cell")
obs.kmeans<- get.summary.stats_kmeans(dat)
kmeans.list[[i]]<- obs.kmeans
}
dat.cells<- grid.summary.table(dat = dat.list[[1]], crs = CRS('+init=epsg:32617'))
dat.cells<- kmeans.cluster(dat.cells)
dat<- left_join(dat.list[[1]], dat.cells[,-c(2:3)], by = "grid.cell")
obs.kmeans<- get.summary.stats_kmeans(dat)
View(dat)
dat1=dat %>% filter(id==1)
dat1<- assign.time.seg(obs1.seg, obs1.breakpts, dat1)
dat12=dat %>% filter(id==12)
dat12<- assign.time.seg(obs12.seg, obs12.breakpts, dat12)
dat19=dat %>% filter(id==19)
dat19<- assign.time.seg(obs19.seg, obs19.breakpts, dat19)
dat27=dat %>% filter(id==27)
dat27<- assign.time.seg(obs27.seg, obs27.breakpts, dat27)
dat.list<- list(`1`=dat1, `12`=dat12, `19`=dat19, `27`=dat27)
dat<- read.csv("Snail Kite Gridded Data.csv", header = T, sep = ",")
dat1=dat %>% filter(id==1)
dat1<- assign.time.seg(obs1.seg, obs1.breakpts, dat1)
dat12=dat %>% filter(id==12)
dat12<- assign.time.seg(obs12.seg, obs12.breakpts, dat12)
dat19=dat %>% filter(id==19)
dat19<- assign.time.seg(obs19.seg, obs19.breakpts, dat19)
dat27=dat %>% filter(id==27)
dat27<- assign.time.seg(obs27.seg, obs27.breakpts, dat27)
dat.list<- list(`1`=dat1, `12`=dat12, `19`=dat19, `27`=dat27)
kmeans.list<- vector("list", length(dat.list))
dat.cells<- grid.summary.table(dat = dat.list[[1]], crs = CRS('+init=epsg:32617'))
dat.cells<- kmeans.cluster(dat.cells)
dat<- left_join(dat.list[[1]], dat.cells[,-c(2:3)], by = "grid.cell")
obs.kmeans<- get.summary.stats_kmeans(dat)
dev.off()
for (i in 1:length(dat.list)) {
dat.cells<- grid.summary.table(dat = dat.list[[i]], crs = CRS('+init=epsg:32617'))
dat.cells<- kmeans.cluster(dat.cells)
dat<- left_join(dat.list[[i]], dat.cells[,-c(2:3)], by = "grid.cell")
obs.kmeans<- get.summary.stats_kmeans(dat)
kmeans.list[[i]]<- obs.kmeans
}
for (i in 1:length(dat.list)) {
dat.cells<- grid.summary.table(dat = dat.list[[i]], crs = CRS('+init=epsg:32617'))
dat.cells<- kmeans.cluster(dat.cells)
dat<- left_join(dat.list[[i]], dat.cells[,-c(2:3)], by = "grid.cell")
obs.kmeans<- get.summary.stats_kmeans(dat)
kmeans.list[[i]]<- obs.kmeans
}
i=1
dat.cells<- grid.summary.table(dat = dat.list[[i]], crs = CRS('+init=epsg:32617'))
dat.cells<- kmeans.cluster(dat.cells)
dat<- left_join(dat.list[[i]], dat.cells[,-c(2:3)], by = "grid.cell")
obs.kmeans<- get.summary.stats_kmeans(dat)
kmeans.list[[i]]<- obs.kmeans
i=2
dat.cells<- grid.summary.table(dat = dat.list[[i]], crs = CRS('+init=epsg:32617'))
dat.cells<- kmeans.cluster(dat.cells)
View(dat1)
foo<- dat.list[[2]]
View(foo)
set.seed(1)
for (i in 1:20) {  #test from 1 to 20 clusters
tmp=kmeans(dat.cells[,-1], i)
store.val[i,]=tmp$betweenss / tmp$totss
}
dat.cells
dat.cells<- grid.summary.table(dat = dat.list[[2]], crs = CRS('+init=epsg:32617'))
View(dat.cells)
View(foo)
grid_5<- raster(extent(min(dat$utmlong), max(dat$utmlong),
min(dat$utmlat), max(dat$utmlat)) + 10000)
res(grid_5)<- 5000
proj4string(grid_5)<- crs
crs=CRS('+init=epsg:32617')
proj4string(grid_5)<- crs
grid_5[]<- 0
grid.cell.locs<- coordinates(grid_5) %>% data.frame()
names(grid.cell.locs)<- c("grid.x", "grid.y")
grid.cell.locs$grid.cell<- 1:length(grid_5)
dat=dat.list[[2]]
dat<- left_join(dat,grid.cell.locs, by="grid.cell")
View(dat)
grid.cell.id<- unique(dat$grid.cell)
dat.cells=matrix(NA, length(grid.cell.id), 3)
for (i in 1:length(grid.cell.id)) {
tmp<- dat %>% filter(grid.cell == grid.cell.id[i]) %>% dplyr::select(grid.cell,grid.x,grid.y) %>%
slice(n=1) %>% as.numeric()
dat.cells[i,]<- tmp
}
colnames(dat.cells)<- c("grid.cell","grid.x","grid.y")
View(dat.cells)
dat.cells
grid.summary.table=function(dat,crs){  #dat must already have time.seg assigned
#create grid and extract coords per cell
grid_5<- raster(extent(min(dat$utmlong), max(dat$utmlong),
min(dat$utmlat), max(dat$utmlat)) + 10000)
res(grid_5)<- 5000
proj4string(grid_5)<- crs
grid_5[]<- 0
grid.cell.locs<- coordinates(grid_5) %>% data.frame()
names(grid.cell.locs)<- c("grid.x", "grid.y")
grid.cell.locs$grid.cell<- 1:length(grid_5)
#filter by only cells visited by ID
dat<- left_join(dat,grid.cell.locs, by="grid.cell")
grid.cell.id<- unique(dat$grid.cell)
dat.cells=matrix(NA, length(grid.cell.id), 3)
for (i in 1:length(grid.cell.id)) {
tmp<- dat %>% filter(grid.cell == grid.cell.id[i]) %>% dplyr::select(grid.cell,grid.x,grid.y) %>%
slice(n=1) %>% as.numeric()
dat.cells[i,]<- tmp
}
colnames(dat.cells)<- c("grid.cell","grid.x","grid.y")
dat.cells
}
i=2
dat.cells<- grid.summary.table(dat = dat.list[[i]], crs = CRS('+init=epsg:32617'))
View(dat.cells)
i=1
dat.cells<- grid.summary.table(dat = dat.list[[i]], crs = CRS('+init=epsg:32617'))
View(dat.cells)
View(dat)
dat<- dat.list[[2]]
dat<- left_join(dat,grid.cell.locs, by="grid.cell")
grid.cell.id<- unique(dat$grid.cell)
dat.cells=matrix(NA, length(grid.cell.id), 3)
for (i in 1:length(grid.cell.id)) {
tmp<- dat %>% filter(grid.cell == grid.cell.id[i]) %>% dplyr::select(grid.cell,grid.x,grid.y) %>%
slice(n=1) %>% as.numeric()
dat.cells[i,]<- tmp
}
colnames(dat.cells)<- c("grid.cell","grid.x","grid.y")
View(dat.cells)
dat.cells<- grid.summary.table(dat = dat.list[[1]], crs = CRS('+init=epsg:32617'))
dat.cells
dat.cells<- grid.summary.table(dat = dat.list[[2]], crs = CRS('+init=epsg:32617'))
dat.cells
dat.cells<- grid.summary.table(dat = dat.list[[3]], crs = CRS('+init=epsg:32617'))
dat.cells
dat.cells<- grid.summary.table(dat = dat.list[[4]], crs = CRS('+init=epsg:32617'))
dat.cells
