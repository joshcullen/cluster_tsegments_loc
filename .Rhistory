v=sample.v(z=z,nclustmax=nclustmax,gamma1=gamma1)
phi=GetPhi(vec=c(v,1),nclustmax=nclustmax)
theta=sample.theta(dat=dat,nclustmax=nclustmax,nloc=nloc,z=z,psi=psi)
#to avoid numerical issues
theta[theta<lo]=lo
# theta=theta.true
#get logl
tmp=sum(dat*log(theta)[z,])+sum(dbeta(v,1,gamma1,log=T))+sum((psi-1)*log(theta))
#store results
store.loglikel[i]=tmp
store.theta[i,]=theta
store.phi[i,]=phi
store.z[i,]=z
}
n=rowSums(dat)
nobs=nrow(dat)
nloc=ncol(dat)
lo=0.000000000000001
#priors
psi=0.01
gamma1=0.1
#starting values
nclustmax=nloc
z=sample(1:nclustmax,size=nobs,replace=T)
theta=matrix(1/nloc,nclustmax,nloc)
phi=rep(1/nclustmax,nclustmax)
#store results
ngibbs=1000
store.phi=matrix(NA,ngibbs,nclustmax)
store.z=matrix(NA,ngibbs,nobs)
store.theta=matrix(NA,ngibbs,nclustmax*nloc)
store.loglikel=matrix(NA,ngibbs,1)
nburn=ngibbs/2
for (i in 1:ngibbs){
print(i)
#occasionally re-order this
if (i<nburn & i%%50==0){
ind=order(phi,decreasing=T)
theta=theta[ind,]
phi=phi[ind]
znew=z
for (j in 1:nclustmax){
znew[z==ind[j]]=j
}
z=znew
}
#draw samples from FCD's
z=sample.z(dat=dat,theta=theta,phi=phi,
nobs=nobs,nclustmax=nclustmax,nloc=nloc,z=z,n=n)
# z=z.true
v=sample.v(z=z,nclustmax=nclustmax,gamma1=gamma1)
phi=GetPhi(vec=c(v,1),nclustmax=nclustmax)
theta=sample.theta(dat=dat,nclustmax=nclustmax,nloc=nloc,z=z,psi=psi)
#to avoid numerical issues
theta[theta<lo]=lo
# theta=theta.true
#get logl
tmp=sum(dat*log(theta)[z,])+sum(dbeta(v,1,gamma1,log=T))+sum((psi-1)*log(theta))
#store results
store.loglikel[i]=tmp
store.theta[i,]=theta
store.phi[i,]=phi
store.z[i,]=z
}
plot(store.loglikel,type='l')
plot(store.phi[ngibbs,],type='h')
store.phi[ngibbs,]
dat=read.csv('fake data.csv',as.is=T)
dat=data.matrix(dat)
n=rowSums(dat)
nobs=nrow(dat)
nloc=ncol(dat)
lo=0.000000000000001
#priors
psi=0.01
gamma1=0.1
#starting values
nclustmax=nloc
z=sample(1:nclustmax,size=nobs,replace=T)
theta=matrix(1/nloc,nclustmax,nloc)
phi=rep(1/nclustmax,nclustmax)
#store results
ngibbs=1000
store.phi=matrix(NA,ngibbs,nclustmax)
store.z=matrix(NA,ngibbs,nobs)
store.theta=matrix(NA,ngibbs,nclustmax*nloc)
store.loglikel=matrix(NA,ngibbs,1)
#gibbs sampler
nburn=ngibbs/2
setwd("~/Documents/Snail Kite Project/Data/R Scripts/cluster_tsegments_loc")
dat=read.csv('fake data.csv',as.is=T)
dat=data.matrix(dat)
n=rowSums(dat)
nobs=nrow(dat)
nloc=ncol(dat)
lo=0.000000000000001
#priors
psi=0.01
gamma1=0.1
#starting values
nclustmax=nloc
z=sample(1:nclustmax,size=nobs,replace=T)
theta=matrix(1/nloc,nclustmax,nloc)
phi=rep(1/nclustmax,nclustmax)
#store results
ngibbs=1000
store.phi=matrix(NA,ngibbs,nclustmax)
store.z=matrix(NA,ngibbs,nobs)
store.theta=matrix(NA,ngibbs,nclustmax*nloc)
store.loglikel=matrix(NA,ngibbs,1)
#gibbs sampler
nburn=ngibbs/2
for (i in 1:ngibbs){
print(i)
#occasionally re-order this
if (i<nburn & i%%50==0){
ind=order(phi,decreasing=T)
theta=theta[ind,]
phi=phi[ind]
znew=z
for (j in 1:nclustmax){
znew[z==ind[j]]=j
}
z=znew
}
#draw samples from FCD's
z=sample.z(dat=dat,theta=theta,phi=phi,
nobs=nobs,nclustmax=nclustmax,nloc=nloc,z=z,n=n)
# z=z.true
v=sample.v(z=z,nclustmax=nclustmax,gamma1=gamma1)
phi=GetPhi(vec=c(v,1),nclustmax=nclustmax)
theta=sample.theta(dat=dat,nclustmax=nclustmax,nloc=nloc,z=z,psi=psi)
#to avoid numerical issues
theta[theta<lo]=lo
# theta=theta.true
#get logl
tmp=sum(dat*log(theta)[z,])+sum(dbeta(v,1,gamma1,log=T))+sum((psi-1)*log(theta))
#store results
store.loglikel[i]=tmp
store.theta[i,]=theta
store.phi[i,]=phi
store.z[i,]=z
}
nclustmax=20
z=sample(1:nclustmax,size=nobs,replace=T)
theta=matrix(1/nloc,nclustmax,nloc)
phi=rep(1/nclustmax,nclustmax)
#store results
ngibbs=1000
store.phi=matrix(NA,ngibbs,nclustmax)
store.z=matrix(NA,ngibbs,nobs)
store.theta=matrix(NA,ngibbs,nclustmax*nloc)
store.loglikel=matrix(NA,ngibbs,1)
#gibbs sampler
nburn=ngibbs/2
for (i in 1:ngibbs){
print(i)
#occasionally re-order this
if (i<nburn & i%%50==0){
ind=order(phi,decreasing=T)
theta=theta[ind,]
phi=phi[ind]
znew=z
for (j in 1:nclustmax){
znew[z==ind[j]]=j
}
z=znew
}
#draw samples from FCD's
z=sample.z(dat=dat,theta=theta,phi=phi,
nobs=nobs,nclustmax=nclustmax,nloc=nloc,z=z,n=n)
# z=z.true
v=sample.v(z=z,nclustmax=nclustmax,gamma1=gamma1)
phi=GetPhi(vec=c(v,1),nclustmax=nclustmax)
theta=sample.theta(dat=dat,nclustmax=nclustmax,nloc=nloc,z=z,psi=psi)
#to avoid numerical issues
theta[theta<lo]=lo
# theta=theta.true
#get logl
tmp=sum(dat*log(theta)[z,])+sum(dbeta(v,1,gamma1,log=T))+sum((psi-1)*log(theta))
#store results
store.loglikel[i]=tmp
store.theta[i,]=theta
store.phi[i,]=phi
store.z[i,]=z
}
write.csv(obs1.seg, "ID1 Seg x Loc.csv", row.names = F)
write.csv(obs12.seg, "ID12 Seg x Loc.csv", row.names = F)
write.csv(obs19.seg, "ID19 Seg x Loc.csv", row.names = F)
write.csv(obs27.seg, "ID27 Seg x Loc.csv", row.names = F)
plot(store.loglikel,type='l')
plot(store.phi[ngibbs,],type='h')
plot(store.z[ngibbs,],type='h')
z.true=z=sample(1:nclust,size=nobs,replace=T)
theta.true=theta=rdirichlet(nclust,rep(0.01,nloc))
fim=data.frame(zestim=store.z[ngibbs,],ztrue=z.true)
table(fim)
View(fim)
seq1=c(4,5,6,2,10,3,8,9,1,7)
tmp=matrix(store.theta[ngibbs,],nclustmax,nloc)
theta.estim=tmp[seq1,]
rango=range(c(theta.estim,theta.true))
plot(theta.estim[1:length(seq1),],theta.true,xlim=rango,ylim=rango)
dim(store.theta)
plot(store.theta[ngibbs,],type='h')
plot(store.phi[ngibbs,],type='h')
plot(store.z[ngibbs,],type='h')
dat=read.csv('ID1 Seg x Loc.csv',header =T, sep = ",")
dat=data.matrix(dat)
n=rowSums(dat)
nobs=nrow(dat)
nloc=ncol(dat)
lo=0.000000000000001
#priors
psi=0.01
gamma1=0.1
#starting values
nclustmax=nloc
z=sample(1:nclustmax,size=nobs,replace=T)
theta=matrix(1/nloc,nclustmax,nloc)
phi=rep(1/nclustmax,nclustmax)
#store results
ngibbs=1000
store.phi=matrix(NA,ngibbs,nclustmax)
store.z=matrix(NA,ngibbs,nobs)
store.theta=matrix(NA,ngibbs,nclustmax*nloc)
store.loglikel=matrix(NA,ngibbs,1)
#gibbs sampler
nburn=ngibbs/2
rm(list=ls(all=TRUE))
set.seed(1)
library('Rcpp')
sourceCpp('aux1.cpp')
source('gibbs functions.R') #for clustering
dat=read.csv('ID1 Seg x Loc.csv',header =T, sep = ",")
dat=data.matrix(dat)
n=rowSums(dat)
nobs=nrow(dat)
nloc=ncol(dat)
lo=0.000000000000001
psi=0.01
gamma1=0.1
nclustmax=nloc
z=sample(1:nclustmax,size=nobs,replace=T)
theta=matrix(1/nloc,nclustmax,nloc)
phi=rep(1/nclustmax,nclustmax)
ngibbs=1000
store.phi=matrix(NA,ngibbs,nclustmax)
store.z=matrix(NA,ngibbs,nobs)
store.theta=matrix(NA,ngibbs,nclustmax*nloc)
store.loglikel=matrix(NA,ngibbs,1)
nburn=ngibbs/2
for (i in 1:ngibbs){
print(i)
#occasionally re-order this
if (i<nburn & i%%50==0){
ind=order(phi,decreasing=T)
theta=theta[ind,]
phi=phi[ind]
znew=z
for (j in 1:nclustmax){
znew[z==ind[j]]=j
}
z=znew
}
#draw samples from FCD's
z=sample.z(dat=dat,theta=theta,phi=phi,
nobs=nobs,nclustmax=nclustmax,nloc=nloc,z=z,n=n)
# z=z.true
v=sample.v(z=z,nclustmax=nclustmax,gamma1=gamma1)
phi=GetPhi(vec=c(v,1),nclustmax=nclustmax)
theta=sample.theta(dat=dat,nclustmax=nclustmax,nloc=nloc,z=z,psi=psi)
#to avoid numerical issues
theta[theta<lo]=lo
# theta=theta.true
#get logl
tmp=sum(dat*log(theta)[z,])+sum(dbeta(v,1,gamma1,log=T))+sum((psi-1)*log(theta))
#store results
store.loglikel[i]=tmp
store.theta[i,]=theta
store.phi[i,]=phi
store.z[i,]=z
}
plot(store.loglikel,type='l')
plot(store.phi[ngibbs,],type='h')
plot(store.theta[ngibbs,],type='h')
plot(store.z[ngibbs,],type='h')
dat=read.csv('ID12 Seg x Loc.csv',header =T, sep = ",")
dat=data.matrix(dat)
n=rowSums(dat)
nobs=nrow(dat)
nloc=ncol(dat)
lo=0.000000000000001
psi=0.01
gamma1=0.1
dat=read.csv('ID1 Seg x Loc.csv',header =T, sep = ",")
dat=data.matrix(dat)
n=rowSums(dat)
nobs=nrow(dat)
nloc=ncol(dat)
lo=0.000000000000001
psi=0.01
gamma1=0.1
nclustmax=nobs
z=sample(1:nclustmax,size=nobs,replace=T)
theta=matrix(1/nloc,nclustmax,nloc)
phi=rep(1/nclustmax,nclustmax)
ngibbs=1000
store.phi=matrix(NA,ngibbs,nclustmax)
store.z=matrix(NA,ngibbs,nobs)
store.theta=matrix(NA,ngibbs,nclustmax*nloc)
store.loglikel=matrix(NA,ngibbs,1)
nburn=ngibbs/2
for (i in 1:ngibbs){
print(i)
#occasionally re-order this
if (i<nburn & i%%50==0){
ind=order(phi,decreasing=T)
theta=theta[ind,]
phi=phi[ind]
znew=z
for (j in 1:nclustmax){
znew[z==ind[j]]=j
}
z=znew
}
#draw samples from FCD's
z=sample.z(dat=dat,theta=theta,phi=phi,
nobs=nobs,nclustmax=nclustmax,nloc=nloc,z=z,n=n)
# z=z.true
v=sample.v(z=z,nclustmax=nclustmax,gamma1=gamma1)
phi=GetPhi(vec=c(v,1),nclustmax=nclustmax)
theta=sample.theta(dat=dat,nclustmax=nclustmax,nloc=nloc,z=z,psi=psi)
#to avoid numerical issues
theta[theta<lo]=lo
# theta=theta.true
#get logl
tmp=sum(dat*log(theta)[z,])+sum(dbeta(v,1,gamma1,log=T))+sum((psi-1)*log(theta))
#store results
store.loglikel[i]=tmp
store.theta[i,]=theta
store.phi[i,]=phi
store.z[i,]=z
}
plot(store.loglikel,type='l')
plot(store.phi[ngibbs,],type='h')
plot(store.theta[ngibbs,],type='h')
plot(store.z[ngibbs,],type='h')
dat=read.csv('ID12 Seg x Loc.csv',header =T, sep = ",")
dat=data.matrix(dat)
n=rowSums(dat)
nobs=nrow(dat)
nloc=ncol(dat)
lo=0.000000000000001
#priors
psi=0.01
gamma1=0.1
nclustmax=nobs
z=sample(1:nclustmax,size=nobs,replace=T)
theta=matrix(1/nloc,nclustmax,nloc)
phi=rep(1/nclustmax,nclustmax)
ngibbs=1000
store.phi=matrix(NA,ngibbs,nclustmax)
store.z=matrix(NA,ngibbs,nobs)
store.theta=matrix(NA,ngibbs,nclustmax*nloc)
store.loglikel=matrix(NA,ngibbs,1)
nburn=ngibbs/2
for (i in 1:ngibbs){
print(i)
#occasionally re-order this
if (i<nburn & i%%50==0){
ind=order(phi,decreasing=T)
theta=theta[ind,]
phi=phi[ind]
znew=z
for (j in 1:nclustmax){
znew[z==ind[j]]=j
}
z=znew
}
#draw samples from FCD's
z=sample.z(dat=dat,theta=theta,phi=phi,
nobs=nobs,nclustmax=nclustmax,nloc=nloc,z=z,n=n)
# z=z.true
v=sample.v(z=z,nclustmax=nclustmax,gamma1=gamma1)
phi=GetPhi(vec=c(v,1),nclustmax=nclustmax)
theta=sample.theta(dat=dat,nclustmax=nclustmax,nloc=nloc,z=z,psi=psi)
#to avoid numerical issues
theta[theta<lo]=lo
# theta=theta.true
#get logl
tmp=sum(dat*log(theta)[z,])+sum(dbeta(v,1,gamma1,log=T))+sum((psi-1)*log(theta))
#store results
store.loglikel[i]=tmp
store.theta[i,]=theta
store.phi[i,]=phi
store.z[i,]=z
}
plot(store.loglikel,type='l')
plot(store.phi[ngibbs,],type='h')
plot(store.theta[ngibbs,],type='h')
plot(store.z[ngibbs,],type='h')
dat=read.csv('ID19 Seg x Loc.csv',header =T, sep = ",")
dat=data.matrix(dat)
n=rowSums(dat)
nobs=nrow(dat)
nloc=ncol(dat)
lo=0.000000000000001
psi=0.01
gamma1=0.1
nclustmax=nobs
z=sample(1:nclustmax,size=nobs,replace=T)
theta=matrix(1/nloc,nclustmax,nloc)
phi=rep(1/nclustmax,nclustmax)
ngibbs=1000
store.phi=matrix(NA,ngibbs,nclustmax)
store.z=matrix(NA,ngibbs,nobs)
store.theta=matrix(NA,ngibbs,nclustmax*nloc)
store.loglikel=matrix(NA,ngibbs,1)
nburn=ngibbs/2
for (i in 1:ngibbs){
print(i)
#occasionally re-order this
if (i<nburn & i%%50==0){
ind=order(phi,decreasing=T)
theta=theta[ind,]
phi=phi[ind]
znew=z
for (j in 1:nclustmax){
znew[z==ind[j]]=j
}
z=znew
}
#draw samples from FCD's
z=sample.z(dat=dat,theta=theta,phi=phi,
nobs=nobs,nclustmax=nclustmax,nloc=nloc,z=z,n=n)
# z=z.true
v=sample.v(z=z,nclustmax=nclustmax,gamma1=gamma1)
phi=GetPhi(vec=c(v,1),nclustmax=nclustmax)
theta=sample.theta(dat=dat,nclustmax=nclustmax,nloc=nloc,z=z,psi=psi)
#to avoid numerical issues
theta[theta<lo]=lo
# theta=theta.true
#get logl
tmp=sum(dat*log(theta)[z,])+sum(dbeta(v,1,gamma1,log=T))+sum((psi-1)*log(theta))
#store results
store.loglikel[i]=tmp
store.theta[i,]=theta
store.phi[i,]=phi
store.z[i,]=z
}
plot(store.loglikel,type='l')
plot(store.phi[ngibbs,],type='h')
plot(store.theta[ngibbs,],type='h')
plot(store.z[ngibbs,],type='h')
dat=read.csv('ID27 Seg x Loc.csv',header =T, sep = ",")
dat=data.matrix(dat)
n=rowSums(dat)
nobs=nrow(dat)
nloc=ncol(dat)
lo=0.000000000000001
#priors
psi=0.01
gamma1=0.1
#starting values
nclustmax=nobs
z=sample(1:nclustmax,size=nobs,replace=T)
theta=matrix(1/nloc,nclustmax,nloc)
phi=rep(1/nclustmax,nclustmax)
#store results
ngibbs=1000
store.phi=matrix(NA,ngibbs,nclustmax)
store.z=matrix(NA,ngibbs,nobs)
store.theta=matrix(NA,ngibbs,nclustmax*nloc)
store.loglikel=matrix(NA,ngibbs,1)
#gibbs sampler
nburn=ngibbs/2
for (i in 1:ngibbs){
print(i)
#occasionally re-order this
if (i<nburn & i%%50==0){
ind=order(phi,decreasing=T)
theta=theta[ind,]
phi=phi[ind]
znew=z
for (j in 1:nclustmax){
znew[z==ind[j]]=j
}
z=znew
}
#draw samples from FCD's
z=sample.z(dat=dat,theta=theta,phi=phi,
nobs=nobs,nclustmax=nclustmax,nloc=nloc,z=z,n=n)
# z=z.true
v=sample.v(z=z,nclustmax=nclustmax,gamma1=gamma1)
phi=GetPhi(vec=c(v,1),nclustmax=nclustmax)
theta=sample.theta(dat=dat,nclustmax=nclustmax,nloc=nloc,z=z,psi=psi)
#to avoid numerical issues
theta[theta<lo]=lo
# theta=theta.true
#get logl
tmp=sum(dat*log(theta)[z,])+sum(dbeta(v,1,gamma1,log=T))+sum((psi-1)*log(theta))
#store results
store.loglikel[i]=tmp
store.theta[i,]=theta
store.phi[i,]=phi
store.z[i,]=z
}
plot(store.loglikel,type='l')
plot(store.phi[ngibbs,],type='h')
plot(store.theta[ngibbs,],type='h')
plot(store.z[ngibbs,],type='h')
